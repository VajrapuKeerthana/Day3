variables:-
***********
- variables are used to store the data / values / literals.

types of variables:-
*******************
1.var :- re-intitialization is possible
        re-decalration is possible
2.let:- re-intitialization is possible
        re-decalration is not possible
3.const:-  re-intitialization is not possible
        re-decalration is not  possible

ex: - var username = "Rakesh";
    console.log(username);

    - extension of javascript file  must be ".js".

    console.log() :- it is a method to print the output in the developer console.
    document.writeln():- it is a method to print the output on the UI.

what is comment?
-comments are the ignored lined by the browser.
-to give an information to the developers.

two type of comments in js:-
****************************
html :- <!-- comment to be done -->
css :- /* ulkdsjvl */

js:- 
1.single line comment - (//)
2.multi-line comment - (/**/)


what is data types?
-datatypes used to specify what kind of data stored in the variable.

types of data types:-
*********************
1.primitive data types:-
- they are built-in
- immutable
- they can store only a single values
    -string
    -number
    -boolean
    -undefined
    -null
    -symbol
    -bigint

2.non-primtitive data types:-
- they are user defined 
- mutable
- they can store multiple values.
    -array
    -functions
    -objects
    -math , date , json

Strings:-
**********
-sequence of characters enclosed within "" , '' , ``(template literals/backtiks)

number:-  
- -2^53-1 to +2^53-1 upto this range we consider as number data type.
- beyond this range it will be bigint.

boolean :- true / false.

undefined:- variable is declared but not initialized with the value.

null:-null is empty value / absence of an object.
- return type of null is "object".

bigint:- any value exceed the range of number dattype we consider that as bigint.
- any value sufix with "n" will be bigint.

Operators:-
**************
- Operators is a special type of symbols used to perform some operations on operands.
ex - 10(operand1) +(operator) 20(operand2)

- unary
- binary
- ternary(operand1 ? operand2 : operand3)

1.arithmatic Operators
2.assignment operator
3.relational operator
4.logical operator

1.arithmatic Operators:-
- addition
- substraction
- multiplication
- division
- modulus
- expoenentail
- increment(++) :- increment will happen with one value
    - pre-increment :- increment before execution
    - post-increment :- increment after execution
- decrement(--) :- decrmenrted by 1
    - pre-decrement
    - post-decrement

concatenation :- adding two or more strings.
typecasting :- converting one datatype into another datatype.
NaN :- Not a Number :- 

2.assignment operator:-
- = , += , -= , *= ,/= , %= , **=

3.relational operator
- which are used to compare two values.
- == , === , != , !== , > , >= , < , <=
- returns always a boolean.
what is the difference between "==" and "==="?
-"==" - it will check only values not a data type.
-"===" - it will check both values and data types.
- "!=" - similar to == it will check only values not a data types
- "!==" - checks both value and data types.

4.Logical operators:-
AND(&&)- when both sides condition is true then it will return true else false.
OR(||) :- when both side is true or any one side is true it will return true else false.
NOT(!):- if true it becomes false and vice-versa. 

Decision making statments:-
****************************
-if:- it will work for true statments
- if else
- else if ladder
-switch
- ternary

prompt():- this method is used to collect the data from the users.
Arrays:
- it is non primitive
-it is a collection of elements


syntax:
let arr=[];

map(): it is used to ierate values from the array
- if we return the value map() method used nothing

for each(): it is used to ierate values from the array
-if we return the value foreach() method it returns undefined

note:- "this"-it is used to target current executing object.

JSON: JavaScript object Notation
-Json is a lightweight process to transfer the data form client to server.
example:
let user1 ="ramya";
let user2 ="piyush";
let user3 ="chetan";
let user4 ="keerthana";
let user5 ="nikhil";
//console.log(user1);
//console.log(user2);
//console.log(user3);
//console.log(user4);
let users=["ramya","Piyush","Chetan","keerthana","Nikhil"];
for(i=0;i<users.length;i++){
console.log(users[i]);
}

Map method:
let users=["ramya","Piyush","Chetan","keerthana","Nikhil"];
users.map((user)=>{
console.log(user);
})


forEach:
users.forEach((user)=>{
console.log(user);
}

//return in forEach

let x=users.forEach((user)=>{
//console.log(user);
return user;
});
console.log(x);//undefined


What is object?
-object is an entity which is having states(properties ) and behaviours.
-object is used to store the data in the form of key value pairs


ex:
let userDetails={
name:"Keerthi",
age=21,
company :"Amazon",
sal:500000
details:function(){
return 'My name is ${this.name} and i am working in ${this.company}'
}
};
console.log(userDetails);
console.log(userDetails.name);
console.log(userDetails.details());

//create the nested object and access the property of nested object

let userDetails={
name:"Keerthi",
age=21,
company :"Amazon",
sal:500000
address:{
city:"Hyd",
area:{
  areaName=Hitech",
  pincode:123456
}
}
}
console.log(userDetails.address.city);
console.log(userDetails.address.area.areaName);

// create array of objects and print the values

let userDetails =[
{
name:"Keerthi",
city="hyd"
}
{
name:"piyush",
city="ndcl"
}
{
name:"chetan",
city="khammam"
}
];

userDetails.map((x)=>{
console.log(x.name);
})


methods of json:-
1.JSON.stringfy(): it is used to convert javascript object into JSON object.
-except number it will store both key and value pairs inside the double quotes.
2.JSON.parse() :- it is used to convert JSON object into javascript object.



ex:
let userDetails{
age:21;
city:"hyd"
};
consle.log(userDetails);
let x = JSON.stringfy(userDetails);
console.log("JSON object"+x);
let y=JSON.parse(x);
console.log(y);